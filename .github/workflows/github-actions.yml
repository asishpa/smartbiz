name: Build and Deploy Spring Boot App

# Trigger the workflow on push to the main branch or when a pull request is merged
on:
  push:
    branches:
      - master

jobs:
  # Job to build and push Docker image
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # You can use other distributions like 'zulu', 'adopt', etc.
          java-version: '17'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the project using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 5: Set up Docker and log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build the Docker image with the multi-stage Dockerfile
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/smartbiz-app:latest .

      # Step 7: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/smartbiz-app:latest

      # Step 8: Deploy to Render using the deploy hook URL
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}  # Ensure this secret is set correctly in your repository
        run: |
          DEPLOY_HOOK_URL="https://api.render.com/deploy/srv-cs3iun0gph6c73c30ucg?key=${{ secrets.RENDER_API_KEY }}&imgURL=docker.io%2F${{ secrets.DOCKER_USERNAME }}%2Fsmartbiz-app%3Alatest"
          curl -X POST "$DEPLOY_HOOK_URL" \
          -H "Content-Type: application/json" || exit 1
